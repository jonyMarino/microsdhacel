/** ###################################################################
**     THIS BEAN MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename  : FC321.H
**     Project   : TestSalida
**     Processor : MC9S12GC32CFU16
**     Beantype  : FreeCntr32
**     Version   : Bean 02.065, Driver 01.14, CPU db: 2.87.396
**     Compiler  : CodeWarrior HC12 C Compiler
**     Date/Time : 22/09/2009, 16:27
**     Abstract  :
**         This device "FreeCntr32" implements 32-bit Free Running Counter
**     Settings  :
**         Timer name                  : TIM_Counter (16-bit)
**         Compare name                : TC7
**         Counter shared              : No
**
**         High speed mode
**             Prescaler               : divide-by-1
**             Clock                   : 8000000 Hz
**           Resolution of timer
**             Xtal ticks              : 160
**             microseconds            : 10
**             seconds (real)          : 0.0000100
**             Hz                      : 100000
**             kHz                     : 100
**
**         Initialization:
**              Timer                  : Enabled
**
**         Timer registers
**              Counter                : TCNT      [68]
**              Mode                   : TIOS      [64]
**              Run                    : TSCR1     [70]
**              Prescaler              : TSCR2     [77]
**
**         Compare registers
**              Compare                : TC7       [94]
**     Contents  :
**         Enable    - byte FC321_Enable(void);
**         Disable   - byte FC321_Disable(void);
**         Reset     - byte FC321_Reset(void);
**         GetTimeUS - byte FC321_GetTimeUS(word *Time);
**         GetTimeMS - byte FC321_GetTimeMS(word *Time);
**
**     (c) Copyright UNIS, a.s. 1997-2008
**     UNIS, a.s.
**     Jundrovska 33
**     624 00 Brno
**     Czech Republic
**     http      : www.processorexpert.com
**     mail      : info@processorexpert.com
** ###################################################################*/

#ifndef __FC321
#define __FC321

/* MODULE FC321. */

#include "Cpu.h"

#pragma CODE_SEG FC321_CODE

byte FC321_Enable(void);
/*
** ===================================================================
**     Method      :  FC321_Enable (bean FreeCntr32)
**
**     Description :
**         This method enables 32-bit free running counter
**     Parameters  :
**         NAME       - DESCRIPTION
**     Returns     :
**         ---       - Error Code
** ===================================================================
*/

#define FC321_Disable() ( \
  TSCR1_TEN = 0,                       /* Stop timer */ \
  TIE_C7I = 0,                         /* Disable interrupt */ \
  ERR_OK                               /* Return result */ \
)
/*
** ===================================================================
**     Method      :  FC321_Disable (bean FreeCntr32)
**
**     Description :
**         This method disables 32-bit free running counter
**     Parameters  : None
**     Returns     :
**         ---       - Error Code
** ===================================================================
*/

byte FC321_Reset(void);
/*
** ===================================================================
**     Method      :  FC321_Reset (bean FreeCntr32)
**
**     Description :
**         Clears the counter.
**     Parameters  : None
**     Returns     :
**         ---       - Error Code
** ===================================================================
*/

byte FC321_GetTimeUS(word *Time);
/*
** ===================================================================
**     Method      :  FC321_GetTimeUS (bean FreeCntr32)
**
**     Description :
**         Returns the time (as a 16-bit unsigned integer) in microseconds
**         since the last resetting after the last reset.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Time            - A pointer to the returned 16-bit value
**                           in microseconds
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_OVERFLOW - Software counter overflow
**                           ERR_MATH - Overflow during evaluation
** ===================================================================
*/

byte FC321_GetTimeMS(word *Time);
/*
** ===================================================================
**     Method      :  FC321_GetTimeMS (bean FreeCntr32)
**
**     Description :
**         Returns the time (as a 16-bit unsigned integer) in milliseconds
**         since the last resetting after the last reset.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Time            - A pointer to the returned 16-bit value
**                           in milliseconds
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_OVERFLOW - Software counter overflow
**                           ERR_MATH - Overflow during evaluation
** ===================================================================
*/

void FC321_Init(void);
/*
** ===================================================================
**     Method      :  FC321_Init (bean FreeCntr32)
**
**     Description :
**         Initializes the associated peripheral(s) and the beans 
**         internal variables. The method is called automatically as a 
**         part of the application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

#pragma CODE_SEG __NEAR_SEG NON_BANKED
__interrupt void FC321_Interrupt(void);
#pragma CODE_SEG FC321_CODE
/*
** ===================================================================
**     Method      :  FC321_Interrupt (bean FreeCntr32)
**
**     Description :
**         The method services the interrupt of the selected peripheral(s)
**         .
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

#pragma CODE_SEG DEFAULT

/* END FC321. */

#endif /* ifndef __FC321 */
/*
** ###################################################################
**
**     This file was created by UNIS Processor Expert 3.00 [04.12]
**     for the Freescale HCS12 series of microcontrollers.
**
** ###################################################################
*/
