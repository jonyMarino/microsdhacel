/** ###################################################################
**     THIS BEAN MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename  : AD1.H
**     Project   : ADC_TEMP_VZ
**     Processor : MC9S08AC128CLK
**     Beantype  : ADC
**     Version   : Bean 01.452, Driver 01.21, CPU db: 3.00.021
**     Compiler  : CodeWarrior HCS08 C Compiler
**     Date/Time : 26/11/2008, 14:35
**     Abstract  :
**         This device "ADC" implements an A/D converter,
**         its control methods and interrupt/event handling procedure.
**     Settings  :
**         AD control register         : ADC1SC1     [$0010]
**         AD control register         : ADC1CFG     [$0016]
**         AD control register         : ADC1RH      [$0012]
**         AD control register         : ADC1RL      [$0013]
**         AD control register         : ADC1CVH     [$0014]
**         AD control register         : ADC1CVL     [$0015]
**         AD control register         : ADC1SC2     [$0011]
**         AD control register         : APCTL1      [$0017]
**         AD control register         : APCTL2      [$0018]
**         AD result register          : ADCres      [$0012]
**         AD result register          : ADCres      [$0012]
**         AD result register          : ADCres      [$0012]
**         AD result register          : ADCres      [$0012]
**         Interrupt name              : Vadc1
**         Priority                    : 
**         User handling procedure     : AD1_OnEnd
**         Number of conversions       : 1
**         AD resolution               : 10-bit
**
**         Input pins
**
**              Port name              : PTB
**              Bit number (in port)   : 2
**              Bit mask of the port   : $0004
**              Port data register     : PTBD        [$0002]
**              Port control register  : PTBDD       [$0003]
**
**              Port name              : PTB
**              Bit number (in port)   : 3
**              Bit mask of the port   : $0008
**              Port data register     : PTBD        [$0002]
**              Port control register  : PTBDD       [$0003]
**
**
**              Port name              : PTB
**              Bit number (in port)   : 4
**              Bit mask of the port   : $0010
**              Port data register     : PTBD        [$0002]
**              Port control register  : PTBDD       [$0003]
**
**         Initialization:
**              Conversion             : Enabled
**              Event                  : Enabled
**         High speed mode
**             Prescaler               : divide-by-8
**     Contents  :
**         Enable             - byte AD1_Enable(void);
**         Disable            - byte AD1_Disable(void);
**         Start              - byte AD1_Start(void);
**         Stop               - byte AD1_Stop(void);
**         Measure            - byte AD1_Measure(bool WaitForResult);
**         EnableAutoCompare  - byte AD1_EnableAutoCompare(bool CompareType, word CompareValue);
**         DisableAutoCompare - byte AD1_DisableAutoCompare(void);
**
**     (c) Copyright UNIS, spol. s r.o. 1997-2008
**     UNIS, spol. s r.o.
**     Jundrovska 33
**     624 00 Brno
**     Czech Republic
**     http      : www.processorexpert.com
**     mail      : info@processorexpert.com
** ###################################################################*/

#ifndef __AD1
#define __AD1

/*Include shared modules, which are used for whole project*/
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"

/* MODULE AD1. */

#include "Cpu.h"


typedef enum{
 
TimEnMues100ms  =0,
TimEnMues250ms  =1,
TimEnMues500ms  =2,
TimEnMues1s     =3,

  
}frecuencias;                          //Dependiendo de la frecuencia(define el tiempo entre muestras) de muestreo requerida
                                      //varia la cantidad posible de conversiones por cada muestra



 void selecChannel(byte );
 
 unsigned int setFrecMuestreo (frecuencias );
 
 void AD1_OnEnd(void); 


 /*    Method      :  ADC_isread 

     Description :
         avisa si el ADC termino de convertir aquel canal.
     Returns     :
         ---             _ TRUE - Canal listo para leerse
                         _ FALSE - No se terminaron las mediciones para el canal  
*/
bool ADC_listo(byte chan);


 /*
** ===================================================================
**     Method      :  ADC_getTA 
**
**     Description :
**         Devuelve el valor medido para la temperatura ambiente
**     Parameters  : None
**     Returns     :
**         ---             _ Valor medido
** ===================================================================
*/

unsigned int ADC_getTA(void);

/*
** ===================================================================
**     Method      :  ADC_getVZ
**
**     Description :
**         Devuelve el valor medido de la tension VZ
**     Parameters  : None
**     Returns     :
**         ---             _ Valor medido
** ===================================================================
*/

 unsigned int ADC_getVZ(void);
 
 
/*
** ===================================================================
**     Method      :  ADC_getVal 
**
**     Description :
**         Devuelve el valor medido para el canal
**     Parameters  : chan  _ Numero de canal
**     Returns     :
**         ---             _ Valor medido
** ===================================================================
*/
unsigned int ADC_getVal(byte); 


__interrupt void AD1_Interrupt(void);
/*
** ===================================================================
**     Method      :  AD1_Interrupt (bean ADC)
**
**     Description :
**         The method services the interrupt of the selected peripheral(s)
**         and eventually invokes event(s) of the bean.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

void AD1_HWEnDi(void);
/*
** ===================================================================
**     Method      :  AD1_HWEnDi (bean ADC)
**
**     Description :
**         Enables or disables the peripheral(s) associated with the bean.
**         The method is called automatically as a part of the Enable and 
**         Disable methods and several internal methods.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/


byte AD1_Enable(void);
/*
** ===================================================================
**     Method      :  AD1_Enable (bean ADC)
**
**     Description :
**         Enables A/D converter bean. <Events> may be generated
**         (<DisableEvent>/<EnableEvent>). If possible, this method
**         switches on A/D converter device, voltage reference, etc.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

byte AD1_Disable(void);
/*
** ===================================================================
**     Method      :  AD1_Disable (bean ADC)
**
**     Description :
**         Disables A/D converter bean. No <events> will be generated.
**         If possible, this method switches off A/D converter device,
**         voltage reference, etc.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

byte AD1_Start(void);
/*
** ===================================================================
**     Method      :  AD1_Start (bean ADC)
**
**     Description :
**         This method starts continuous conversion on all channels
**         that are set in the bean inspector. When each measurement on
**         all channels has finished the <OnEnd > event may be invoked.
**         This method is not available if the <interrupt service> is
**         disabled and the device doesn't support the continuous mode.
**         Note: If time of measurement is too short and the
**         instruction clock is too slow then the conversion complete
**         interrupt and its handler may cause a system overflow.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_DISABLED - Device is disabled
**                           ERR_BUSY - A conversion is already running
** ===================================================================
*/

byte AD1_Stop(void);
/*
** ===================================================================
**     Method      :  AD1_Stop (bean ADC)
**
**     Description :
**         This method stops the continuous measurement or disables
**         a trigger mode (if supported by HW), which has been
**         started by one of the following methods:
**         Version specific information for Freescale HCS08 and HC08
**         derivatives ] 
**         - <Start> 
**         - <EnableIntChanTrigger>
**         - <EnableExtChanTrigger>
**         The Stop method is available if one of the previously
**         mentioned methods is supported by A/D converter device
**         and is enabled to be generated.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_BUSY - No continuous measurement is
**                           running. Neither internal trigger nor
**                           external trigger have been enabled (if
**                           these are supported by HW).
** ===================================================================
*/

byte AD1_Measure(bool WaitForResult);
/*
** ===================================================================
**     Method      :  AD1_Measure (bean ADC)
**
**     Description :
**         This method performs one measurement on all channels that
**         are set in the bean inspector. (Note: If the <number of
**         conversions> is more than one the conversion of A/D channels
**         is performed specified number of times.)
**     Parameters  :
**         NAME            - DESCRIPTION
**         WaitForResult   - Wait for a result of a
**                           conversion. If <interrupt service> is
**                           disabled, A/D peripheral doesn't support
**                           measuring all channels at once or Autoscan
**                           mode property isn't enabled and at the same
**                           time the <number of channel> is greater
**                           than 1, then the WaitForResult parameter is
**                           ignored and the method waits for each
**                           result every time. If the <interrupt
**                           service> is disabled and a <number of
**                           conversions> is greater than 1, the
**                           parameter is ignored and the method also
**                           waits for each result every time.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_DISABLED - Device is disabled
**                           ERR_BUSY - A conversion is already running
** ===================================================================
*/



void AD1_Init(void);
/*
** ===================================================================
**     Method      :  AD1_Init (bean ADC)
**
**     Description :
**         Initializes the associated peripheral(s) and the bean's 
**         internal variables. The method is called automatically as a 
**         part of the application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/



/* END AD1. */

#endif /* ifndef __AD1 */
/*
** ###################################################################
**
**     This file was created by UNIS Processor Expert 3.03 [04.07]
**     for the Freescale HCS08 series of microcontrollers.
**
** ###################################################################
*/
