            																															/** ###################################################################
**     THIS BEAN MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename  : TO1.H
**     Project   : _10_03
**     Processor : MC9S12GC32CFU16
**     Beantype  : TimerOut
**     Version   : Bean 02.095, Driver 01.08, CPU db: 2.87.320
**     Compiler  : Metrowerks HC12 C Compiler
**     Date/Time : 24/07/2006, 10:32 a.m.
**     Abstract  :
**         This bean implements a periodic signal generator 1:1 (Flip-Flop Output).
**         The signal alternates the "0" and "1" output values in exactly
**         regular intervals; that is why the time length of the "0" part
**         of one pulse is equal to the "1" part of one pulse.
**     Settings  :
**         Used output pin             : 
**             ----------------------------------------------------
**                Number (on package)  |    Name
**             ----------------------------------------------------
**                       6             |  PT1_PWM1_IOC1
**             ----------------------------------------------------
**
**         Timer name                  : TIM (16-bit)
**         Compare name                : TC1
**           Counter shared            : Yes
**
**         High speed mode
**             Prescaler               : divide-by-16
**             Clock                   : 1562500 Hz
**           Pulse width
**             Xtal ticks              : 31
**             microseconds            : 4
**             seconds (real)          : 0.0000038
**             Hz                      : 260417
**             kHz                     : 260
**
**         Runtime setting             : pulse width interval (continual setting)
**             ticks                   : 31 to 320000 ticks
**             microseconds            : 4 to 40000 microseconds
**             milliseconds            : 1 to 40 milliseconds
**             seconds (real)          : 0.0000038 to 0.0400000 seconds
**             Hz                      : 25 to 260416 Hz
**             kHz                     : 1 to 260 kHz
**
**         Initialization:
**              Output level           : low
**              Timer                  : Disabled
**              Events                 : Enabled
**
**         Timer registers
**              Counter                : TCNT      [68]
**              Mode                   : TIOS      [64]
**              Run                    : TSCR1     [70]
**              Prescaler              : TSCR2     [77]
**
**         Compare registers
**              Compare                : TC1       [82]
**
**         Flip-flop registers
**              Mode                   : TCTL2     [73]
**     Contents  :
**         Enable      - byte TO1_Enable(void);
**         Disable     - byte TO1_Disable(void);
**         SetPeriodUS - byte TO1_SetPeriodUS(word Time);
**         SetValue    - byte TO1_SetValue(void);
**         ClrValue    - byte TO1_ClrValue(void);
**
**     (c) Copyright UNIS, spol. s r.o. 1997-2004
**     UNIS, spol. s r.o.
**     Jundrovska 33
**     624 00 Brno
**     Czech Republic
**     http      : www.processorexpert.com
**     mail      : info@processorexpert.com
** ###################################################################*/

#ifndef __TO1
#define __TO1

/* MODULE TO1. */

#include "Cpu.h"
#include "pwm_periodos.h"
#include "PWMTimer.hpp"

#pragma CODE_SEG PWM_CODE                     
#pragma DATA_SEG PWM_DATA                                            


void PWM_Enable(byte num_salida);
void PWM_Disable(byte num_salida);
bool pwm_timer_isEnable(byte num_salida);

byte PWM_SetRatio16( PWMTimer * pwm,word Ratio);		/*Ratio es un valor de 0 a 1000*/
byte setPWM_period( PWMTimer * pwm,byte Mode);
void PWM_ClrValue(byte num_salida);
void PWM_SetValue(byte num_salida);
void llama_callOnToggleListeners(char n);
/*
** ===================================================================
**     Method      :  PWM_init
**
**     Description :
** ===================================================================
*/
void PWM_init( PWMTimer * pwm,byte pin);

/*
** ===================================================================
**     Method      :  PWM_getPeriodText
**
**     Description :
** ===================================================================
*/
const char * PWM_getPeriodText(byte period);


#pragma CODE_SEG __NEAR_SEG NON_BANKED     
__interrupt void PWM0_Interrupt(void);
__interrupt void PWM1_Interrupt(void);
__interrupt void PWM2_Interrupt(void);
__interrupt void PWM3_Interrupt(void);
__interrupt void PWM4_Interrupt(void);
__interrupt void PWM5_Interrupt(void);
__interrupt void PWM6_Interrupt(void);
__interrupt void PWM7_Interrupt(void);
#pragma CODE_SEG PWM_CODE                     

#pragma DATA_SEG DEFAULT                                  
#pragma CODE_SEG DEFAULT                                   

/* END TO1. */

#endif /* ifndef __TO1 */
/*
** ###################################################################
**
**     This file was created by UNIS Processor Expert 2.95 [03.62]
**     for the Freescale HCS12 series of microcontrollers.
**
** ###################################################################
*/
