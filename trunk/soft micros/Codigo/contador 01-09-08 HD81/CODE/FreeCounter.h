/** ###################################################################
**     THIS BEAN MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename  : FreeCounter.H
**     Project   : contador_12_06_06
**     Processor : MC9S12GC32CFU16
**     Beantype  : FreeCntr32
**     Version   : Bean 02.060, Driver 01.12, CPU db: 2.87.392
**     Compiler  : CodeWarrior HC12 C Compiler
**     Date/Time : 06/05/2009, 9:16
**     Abstract  :
**         This device "FreeCntr32" implements 32-bit Free Running Counter
**     Settings  :
**         Timer name                  : TIM_Counter (16-bit)
**         Compare name                : TC1
**         Counter shared              : Yes
**
**         High speed mode
**             Prescaler               : divide-by-1
**             Clock                   : 8000000 Hz
**           Resolution of timer
**             Xtal ticks              : 1600
**             microseconds            : 100
**             seconds (real)          : 0.0001000
**             Hz                      : 10000
**             kHz                     : 10
**
**         Initialization:
**              Timer                  : Enabled
**
**         Timer registers
**              Counter                : TCNT      [68]
**              Mode                   : TIOS      [64]
**              Run                    : TSCR1     [70]
**              Prescaler              : TSCR2     [77]
**
**         Compare registers
**              Compare                : TC1       [82]
**     Contents  :
**         Reset      - byte FreeCounter_Reset(void);
**         GetTimeSec - byte FreeCounter_GetTimeSec(word *Time);
**
**     (c) Copyright UNIS, spol. s r.o. 1997-2007
**     UNIS, spol. s r.o.
**     Jundrovska 33
**     624 00 Brno
**     Czech Republic
**     http      : www.processorexpert.com
**     mail      : info@processorexpert.com
** ###################################################################*/

#ifndef __FreeCounter
#define __FreeCounter

/* MODULE FreeCounter. */

#include "Cpu.h"

#pragma CODE_SEG FreeCounter_CODE

byte FreeCounter_Reset(void);
/*
** ===================================================================
**     Method      :  FreeCounter_Reset (bean FreeCntr32)
**
**     Description :
**         Clears the counter.
**     Parameters  : None
**     Returns     :
**         ---       - Error Code
** ===================================================================
*/

byte FreeCounter_GetTimeSec(word *Time);
/*
** ===================================================================
**     Method      :  FreeCounter_GetTimeSec (bean FreeCntr32)
**
**     Description :
**         Returns the time (as a 16-bit unsigned integer) in seconds
**         since the last resetting after the last reset.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Time            - A pointer to the returned 16-bit value
**                           in seconds
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_OVERFLOW - Software counter overflow
**                           ERR_MATH - Overflow during evaluation
** ===================================================================
*/

void FreeCounter_Init(void);
/*
** ===================================================================
**     Method      :  FreeCounter_Init (bean FreeCntr32)
**
**     Description :
**         Initializes the associated peripheral(s) and the beans 
**         internal variables. The method is called automatically as a 
**         part of the application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

#pragma CODE_SEG __NEAR_SEG NON_BANKED
__interrupt void FreeCounter_Interrupt(void);
#pragma CODE_SEG FreeCounter_CODE
/*
** ===================================================================
**     Method      :  FreeCounter_Interrupt (bean FreeCntr32)
**
**     Description :
**         The method services the interrupt of the selected peripheral(s)
**         .
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

#pragma CODE_SEG DEFAULT

/* END FreeCounter. */

#endif /* ifndef __FreeCounter */
/*
** ###################################################################
**
**     This file was created by UNIS Processor Expert 2.98 [03.98]
**     for the Freescale HCS12 series of microcontrollers.
**
** ###################################################################
*/
