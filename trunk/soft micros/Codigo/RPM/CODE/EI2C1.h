/** ###################################################################
**     THIS BEAN MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename  : EI2C1.H
**     Project   : Project_2
**     Processor : MC9S12GC32CFU16
**     Beantype  : SW_I2C
**     Version   : Bean 01.119, Driver 03.22, CPU db: 2.87.392
**     Compiler  : CodeWarrior HC12 C Compiler
**     Date/Time : 5/4/2009, 11:47 PM
**     Abstract  :
**         This device "SW_I2C" implements an external I2C
**         communication interface. It uses two general-purpose
**         I/O pins.
**     Settings  :
**         Serial Clock (SCL) pin      :
**             ----------------------------------------------------
**                Number (on package)  |    Name
**             ----------------------------------------------------
**                       3             |  PP1_PWM1_KWP1
**             ----------------------------------------------------
**
**         Serial Data (SDA) pin       :
**             ----------------------------------------------------
**                Number (on package)  |    Name
**             ----------------------------------------------------
**                       79            |  PP5_PWM5_KWP5
**             ----------------------------------------------------
**
**
**         Mode                        : MASTER
**         Communication Speed         : STANDARD MODE
**         Output Buffer Size          : 0
**         Auto Stop Condition         : no
**         Acknowledge Polling Trials  : 2000
**
**         Speed modes
**
**             High Speed Mode         : Enabled
**             Low Speed Mode          : Disabled
**             Slow Speed Mode         : Disabled
**
**         Initialization
**
**             Slave address           : 104
**             Bean function           : Enabled
**             Events                  : Enabled
**     Contents  :
**         SendChar  - byte EI2C1_SendChar(byte Chr);
**         RecvChar  - byte EI2C1_RecvChar(byte *Chr);
**         SendBlock - byte EI2C1_SendBlock(void* Ptr, word Siz, word *Snt);
**         RecvBlock - byte EI2C1_RecvBlock(void* Ptr, word Siz, word *Rcv);
**         SendStop  - byte EI2C1_SendStop(void);
**
**     (c) Copyright UNIS, spol. s r.o. 1997-2007
**     UNIS, spol. s r.o.
**     Jundrovska 33
**     624 00 Brno
**     Czech Republic
**     http      : www.processorexpert.com
**     mail      : info@processorexpert.com
** ###################################################################*/

#ifndef __EI2C1
#define __EI2C1

/* MODULE EI2C1. */

/*Include shared modules, which are used for whole project*/
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"

#include "Cpu.h"

#pragma CODE_SEG EI2C1_CODE

//#define  opcion_1
void EI2C1_Init(void);
/*
** ===================================================================
**     Method      :  EI2C1_Init (bean SW_I2C)
**
**     Description :
**         Initializes the associated peripheral(s) and the beans 
**         internal variables. The method is called automatically as a 
**         part of the application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

byte EI2C1_SendChar(byte Chr);
/*
** ===================================================================
**     Method      :  EI2C1_SendChar (bean SW_I2C)
**
**     Description :
**         When working as a MASTER, this method writes 7 bits of slave
**         address plus R/W bit = 0 to the I2C bus and then writes one
**         character (byte) to the bus. The slave address must be
**         specified before by the "SelectSlave" method or in the bean
**         initialization section of <Slave address init> property.
**         When working as the SLAVE, this method writes one character
**         (byte) to the bus. If the ERR_NOTAVAIL error code returned,
**         the char is successfully sent to master but the master
**         device responds by an acknowledgement instead of no
**         acknowledgement at the end of transfer. <OnError> event is
**         called in this case.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Chr             - Character to send
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_BUSY - The slave device is busy, it
**                           does not respond by the acknowledgement
**                           (MASTER mode only)
**                           ERR_NOTAVAIL - The master device sends
**                           acknowledgement instead of no
**                           acknowledgement after the last byte
**                           transfer (SLAVE mode only)
**                           ERR_DISABLED - Device is disabled
**                           ERR_BUSOFF - Clock timeout elapsed (SLAVE
**                           mode only)
** ===================================================================
*/

byte EI2C1_RecvChar(byte *Chr);
/*
** ===================================================================
**     Method      :  EI2C1_RecvChar (bean SW_I2C)
**
**     Description :
**         When working as a MASTER, this method writes 7 bits of slave
**         address plus R/W bit = 1 to the I2C bus and then reads one
**         character (byte) from the bus. The slave address must be
**         specified before by the "SelectSlave" method or in the bean
**         initialization section of <Slave address init> property.
**         When working as a SLAVE, this method reads one character
**         (byte) from the bus.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Chr             - Pointer to received character
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_BUSY - The slave device is busy, it
**                           does not respond by the acknowledgement
**                           (MASTER mode only)
**                           ERR_DISABLED - Device is disabled
**                           ERR_BUSOFF - Clock timeout elapsed (SLAVE
**                           mode only)
** ===================================================================
*/

byte EI2C1_SendBlock(void* Ptr,word Siz,word *Snt);
/*
** ===================================================================
**     Method      :  EI2C1_SendBlock (bean SW_I2C)
**
**     Description :
**         When working as a MASTER, this method writes 7 bits of slave
**         address plus R/W bit = 0 to the I2C bus and then writes the
**         block of characters to the bus. If the bean is disabled (by
**         the "Disable" method or initialization), the block is moved
**         to the output buffer if the <Output buffer size> property is
**         different from zero. The content of the output buffer is
**         sent immediately with the stop condition at the end when the
**         bean is enabled by the "Enable" method. After the output
**         buffer transmission, the whole output buffer is cleared. The
**         slave address must be specified before by the "SelectSlave"
**         method or in bean initialization section of <Slave address
**         init> property. When working as a SLAVE, this method writes
**         block of characters to the bus. If the ERR_NOTAVAIL error
**         code is returned, the whole block is successfully sent to a
**         master but the master device responds by an acknowledgement
**         instead of no acknowledgment sent at the end of the last
**         block byte transfer. <OnError> event is called in this case.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Ptr             - A pointer to the block of data to send
**         Siz             - The size of the block
**       * Snt             - A pointer to the number of data that are
**                           sent (copied to buffer)
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_BUSY - The slave device is busy, it
**                           does not respond by the acknowledgement
**                           (MASTER mode only)
**                           ERR_TXFULL - Output buffer is full (MASTER
**                           mode only)
**                           ERR_NOTAVAIL - The master device sends
**                           acknowledgement instead of no
**                           acknowledgement after the last byte
**                           transfer (SLAVE mode only)
**                           ERR_DISABLED - Device is disabled
**                           ERR_BUSOFF - Clock timeout elapsed (SLAVE
**                           mode only)
** ===================================================================
*/

byte EI2C1_RecvBlock(void* Ptr,word Siz,word *Rcv);
/*
** ===================================================================
**     Method      :  EI2C1_RecvBlock (bean SW_I2C)
**
**     Description :
**         When working as a MASTER, this method writes 7 bits of slave
**         address plus R/W bit = 1 to the I2C bus and then reads the
**         block of characters from the bus. The slave address must be
**         specified before by the "SelectSlave" method or in bean
**         initialization section of <Slave address init> property.
**         When working as a SLAVE, this method reads the block of
**         characters from the bus.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Ptr             - A pointer to the block space for received
**                           data
**         Siz             - The size of the block
**       * Rcv             - A pointer to the number of actually
**                           received data
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_BUSY - The slave device is busy, it
**                           does not respond by the acknowledgement
**                           (MASTER mode only)
**                           ERR_DISABLED - Device is disabled
**                           ERR_BUSOFF - Clock timeout elapsed (SLAVE
**                           mode only)
** ===================================================================
*/

byte EI2C1_SendStop(void);
/*
** ===================================================================
**     Method      :  EI2C1_SendStop (bean SW_I2C)
**
**     Description :
**         When working as a MASTER, if the <Automatic stop condition>
**         property value is 'no', this method sends a valid stop
**         condition to the serial data line of the I2C bus to
**         terminate the communication on the bus after using send
**         methods. This method is enabled only if the bean is in
**         MASTER mode and <Automatic stop condition> property value is
**         'no'
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_DISABLED - Device is disabled
** ===================================================================
*/

#pragma CODE_SEG DEFAULT

/* END EI2C1. */

#endif /* ifndef __EI2C1 */
/*
** ###################################################################
**
**     This file was created by UNIS Processor Expert 2.98 [03.98]
**     for the Freescale HCS12 series of microcontrollers.
**
** ###################################################################
*/
