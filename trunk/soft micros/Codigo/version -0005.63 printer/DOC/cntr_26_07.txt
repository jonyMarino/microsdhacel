=============================================================================
List of generated methods in project: cntr_26_07

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "Display1"  (bean ByteIO)
   - Display1_PutVal -Specified value is passed to the Input/Output bean. If the direction is [input] saves the value to a 
                memory or a register, this value will be written to the pins after switching to the output mode - using 
                [SetDir(TRUE)] (see <Safe mode> property for limitations). If the direction is [output] it writes the value to 
                the port. (Method is available only if the Direction = _[output]_ or _[input/output]_).

Module "bits5ULN"  (bean BitsIO)
   - bits5ULN_PutVal -Specified value is passed to the Input/Output bean. If the direction is [input] saves the value to a 
                memory or a register, this value will be written to the pins after switching to the output mode - using 
                [SetDir(TRUE)] (see <Safe mode> property for limitations). If the direction is [output] it writes the value to 
                the pins. (Method is available only if the Direction = _[output]_ or _[input/output]_).

Module "bits2ULN"  (bean BitsIO)
   - bits2ULN_PutVal -Specified value is passed to the Input/Output bean. If the direction is [input] saves the value to a 
                memory or a register, this value will be written to the pins after switching to the output mode - using 
                [SetDir(TRUE)] (see <Safe mode> property for limitations). If the direction is [output] it writes the value to 
                the pins. (Method is available only if the Direction = _[output]_ or _[input/output]_).

Module "trx"       (bean BitIO)
   - trx_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - trx_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.

Module "PTSL"      (bean BitsIO)
   - PTSL_PutBit -Specified value is passed to the specified bit/pin of the Input/Output bean. If the direction is [input] it 
                saves the value to a memory or register, this value will be written to the pin after switching to the output 
                mode - using [SetDir(TRUE)] (see <Safe mode> property for limitations). If the direction is [output] it writes 
                the value to the pin. (Method is available only if the Direction = _[output]_ or _[input/output]_).

Module "PWSN"      (bean BitIO)
   - PWSN_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations).

Module "PUL"       (bean InputPin)
   - PUL_GetVal -Return the value of the Input bean.

Module "WDog1"     (bean WatchDog)
   - WDog1_Clear -Clears the watchdog timer (it makes the timer restart from zero).

Module "AS1"       (bean AsynchroSerial)
   - AS1_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it does not 
                wait for data). This method is enabled only if the receiver property is enabled.  [Note:] Because the preferred 
                method to handle error and break exception in the interrupt mode is to use events <OnError> and <OnBreak> the 
                return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the information about an 
                exception in interrupt mode is returned only if there is a valid character ready to be read. Version specific 
                information for Freescale 56800 derivatives ]   DMA mode:  If DMA controller is available on the selected CPU 
                and the receiver is configured to use DMA controller then this method only sets the selected DMA channel. Then 
                the status of the DMA transfer can be checked using GetCharsInRxBuf method. See an example of a typical usage 
                for details about the communication using DMA.
   - AS1_SendChar -Sends one character to the channel. If the bean is temporarily disabled (Disable method) SendChar method 
                only stores data into an output buffer. In case of a zero output buffer size, only one character can be stored. 
                Enabling the bean (Enable method) starts the transmission of the stored data. This method is available only if 
                the transmitter property is enabled.  Version specific information for Freescale 56800 derivatives ]   DMA mode:
                If DMA controller is available on the selected CPU and the transmitter is configured to use DMA controller then 
                this method only sets selected DMA channel. Then the status of the DMA transfer can be checked using 
                GetCharsInTxBuf method. See an example of a typical usage for details about communication using DMA.

Module "ADC1"      (bean Init_ADC_HCS12)
   - ADC1_Init -This method initializes registers of the ADC module according to this Peripheral Initialization Bean settings. 
                Call this method in user code to initialize the module. By default, the method is called by PE automatically; 
                see "Call Init method" property of the bean for more details.

Module "FLASH1"    (bean Init_FLASH_HCS12)
   - FLASH1_Init -This method initializes registers of the FLASH module according to this Peripheral Initialization Bean 
                settings. Call this method in user code to initialize the module. By default, the method is called by PE 
                automatically; see "Call Init method" property of the bean for more details.

Module "TI1"       (bean TimerInt)
   - TI1_SetPeriodMode -This method switches the bean to a specified mode (changes the period/frequency using the mode values). 
                This method reduces the time needed for setting of a new period value. This method is enabled only if a list of 
                possible period settings is specified at design time (see <Timing dialog box> - Runtime setting - from a list 
                of values). Each of these settings constitutes a _/mode/_ and Processor Expert assigns them a _/mode 
                identifier/_. The prescaler and compare values corresponding to each mode are calculated at design time. Modes 
                can be switched at runtime just by referring to a mode identifier. No run-time calculations are performed, all 
                the calculations are performed at design time. The modes and mode identifiers may be found in the include file 
                *.h.

Module "PWM"       (bean TimerOut)
   - PWM_Enable -This method enables the bean - It starts the signal generation. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - PWM_Disable -This method disables the timer - it stops signal generation and events calling. When the timer is disabled, 
                it is possible to call methods <ClrValue> and <SetValue>.
   - PWM_SetPeriodMode -This method switches the bean to a specified mode (changes the pulse width using the mode values). Each 
                mode is identified by a single 8-bit unsigned number which expresses one pulse width of the generated signal. 
                This method reduces the time needed for setting of a new period value. This method is enabled only if a list of 
                possible period settings is specified at design time (see <Timing dialog box> - Runtime setting - from a list 
                of values). Each of these settings constitutes a _/mode/_ and Processor Expert assigns them a _/mode 
                identifier/_. The prescaler and compare values corresponding to each mode are calculated at design time. Modes 
                can be switched at runtime just by referring to a mode identifier. No run-time calculations are performed, all 
                the calculations are performed at design time. The modes and mode identifiers may be found in the include file 
                *.h.

Module "PWM4"      (bean TimerOut)
   - PWM4_Enable -This method enables the bean - It starts the signal generation. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - PWM4_SetPeriodMode -This method switches the bean to a specified mode (changes the pulse width using the mode values). 
                Each mode is identified by a single 8-bit unsigned number which expresses one pulse width of the generated 
                signal. This method reduces the time needed for setting of a new period value. This method is enabled only if a 
                list of possible period settings is specified at design time (see <Timing dialog box> - Runtime setting - from 
                a list of values). Each of these settings constitutes a _/mode/_ and Processor Expert assigns them a _/mode 
                identifier/_. The prescaler and compare values corresponding to each mode are calculated at design time. Modes 
                can be switched at runtime just by referring to a mode identifier. No run-time calculations are performed, all 
                the calculations are performed at design time. The modes and mode identifiers may be found in the include file 
                *.h.

Module "PWM5"      (bean TimerOut)
   - PWM5_SetPeriodMode -This method switches the bean to a specified mode (changes the pulse width using the mode values). 
                Each mode is identified by a single 8-bit unsigned number which expresses one pulse width of the generated 
                signal. This method reduces the time needed for setting of a new period value. This method is enabled only if a 
                list of possible period settings is specified at design time (see <Timing dialog box> - Runtime setting - from 
                a list of values). Each of these settings constitutes a _/mode/_ and Processor Expert assigns them a _/mode 
                identifier/_. The prescaler and compare values corresponding to each mode are calculated at design time. Modes 
                can be switched at runtime just by referring to a mode identifier. No run-time calculations are performed, all 
                the calculations are performed at design time. The modes and mode identifiers may be found in the include file 
                *.h.

Module "PWM6"      (bean TimerOut)
   - PWM6_SetPeriodMode -This method switches the bean to a specified mode (changes the pulse width using the mode values). 
                Each mode is identified by a single 8-bit unsigned number which expresses one pulse width of the generated 
                signal. This method reduces the time needed for setting of a new period value. This method is enabled only if a 
                list of possible period settings is specified at design time (see <Timing dialog box> - Runtime setting - from 
                a list of values). Each of these settings constitutes a _/mode/_ and Processor Expert assigns them a _/mode 
                identifier/_. The prescaler and compare values corresponding to each mode are calculated at design time. Modes 
                can be switched at runtime just by referring to a mode identifier. No run-time calculations are performed, all 
                the calculations are performed at design time. The modes and mode identifiers may be found in the include file 
                *.h.

Module "O2"        (bean BitIO)
   - O2_PutVal -The specified output value is set. If the direction is [input], the bean saves the value to a memory or a 
                register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).

Module "O4"        (bean BitIO)
   - O4_PutVal -The specified output value is set. If the direction is [input], the bean saves the value to a memory or a 
                register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).

Module "O6"        (bean BitIO)
   - O6_PutVal -The specified output value is set. If the direction is [input], the bean saves the value to a memory or a 
                register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).

Module "O7"        (bean BitIO)
   - O7_PutVal -The specified output value is set. If the direction is [input], the bean saves the value to a memory or a 
                register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).

Module "In1"       (bean InputPin)
   - In1_GetVal -Return the value of the Input bean.

Module "In2"       (bean InputPin)
   - In2_GetVal -Return the value of the Input bean.

Module "Cpu"       (bean MC9S12GC32_80)
   - Cpu_EnableInt -Enable maskable interrupts
   - Cpu_DisableInt -Disable maskable interrupts

===================================================================================
